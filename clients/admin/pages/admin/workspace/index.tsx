import { Button, Input, Text } from "@invenio/core";
import type { NextPageContext } from "next";
import Head from "next/head";
import { map } from "ramda";
import { useRef } from "react";
import styled, { css } from "styled-components";
import { WorkspacesType } from "../../../redux/slices/workspaces";
import { Icon } from "../../../src/atoms/icon";
import { Link } from "../../../src/atoms/link";
import { useWorkspaces } from "../../../src/hooks/workspaces/useWorkspaces";
import { parseCookie } from "../../../src/utils/cookies";
import { getWorkspacesFromServerSide } from "../../../src/utils/fetch/workspaces";
import { standardDateFormat } from "../../../src/utils/functions";

type WorskspaceType = {
  workspaces: WorkspacesType[];
  token: string;
  userId: string;
};
const Container = styled.div`
  display: flex;
  flex-direction: column;
  width: 100%;
`;

const AddNewWorkspace = styled.div`
  display: flex;
  align-self: center;
  width: 100%;
  max-width: 30vw;
  margin-bottom: ${({ theme }) =>
    `${theme.spacings.xl}${theme.units.spacings}`};
`;

const WorkspaceUL = styled.ul`
  width: 100%;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  grid-gap: ${({ theme }) => `${theme.spacings.lg}${theme.units.spacings}`};
  list-style: none;
`;

const WorkspaceLI = styled.li`
  position: relative;
  overflow: hidden;
  border: ${({ theme }) => `1px solid ${theme.colors.secondary}`};
  border-radius: ${({ theme }) =>
    `${theme.borderRadius.md}${theme.units.border}`};
  > button > #delete-icon {
    display: none;
  }
  :hover {
    > button {
      position: absolute;
      top: ${({ theme }) => `${theme.spacings.sm}${theme.units.spacings}`};
      right: ${({ theme }) => `${theme.spacings.sm}${theme.units.spacings}`};
      > #delete-icon {
        display: block;
      }
    }
  }
`;

const WorkspaceLink = styled.a`
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  cursor: pointer;
`;

const TitleStyling = css`
  padding: ${({ theme }) =>
    `${theme.spacings.lg}${theme.units.spacings} ${theme.spacings.md}${theme.units.spacings}`};
`;

const DateStyling = css`
  background-color: ${({ theme }) => theme.colors.bg.optional};
  color: ${({ theme }) => theme.colors.text.optional};
  padding: ${({ theme }) =>
    `${theme.spacings.sm}${theme.units.spacings} ${theme.spacings.md}${theme.units.spacings}`};
`;

const Workspace = ({ workspaces, token, userId }: WorskspaceType) => {
  const { workspacesInState, onAddWorkspace, onDropWorkspace } = useWorkspaces({
    workspaces,
  });
  const addWorkspaceInput = useRef<HTMLInputElement>(null);

  const renderWorkspaces = () => {
    return map(
      ({ title, _id, createdAt }) => (
        <WorkspaceLI key={_id}>
          <Link href={`/admin/workspace/${_id}`}>
            <WorkspaceLink />
          </Link>
          <Text styling={TitleStyling} textVariant="h3" fontSize="lg">
            {title}
          </Text>
          <Text textVariant="p" styling={DateStyling} fontSize="md">
            {standardDateFormat(createdAt)}
          </Text>
          <Icon
            id="delete-icon"
            icon="trash-alt"
            onClick={() => onDropWorkspace({ token, userId, _id })}
          />
        </WorkspaceLI>
      ),
      workspacesInState
    );
  };

  return (
    <>
      <Head>
        <title>Workspace - Invenio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <AddNewWorkspace>
          <Input
            label="Add workspace"
            placeholder="Title for workspace"
            innerRef={addWorkspaceInput}
            onBlur={() => {}}
            icons={{
              end: (
                <Icon
                  icon="plus"
                  onClick={() => {
                    if (addWorkspaceInput.current?.value) {
                      onAddWorkspace({
                        token,
                        userId,
                        title: addWorkspaceInput.current?.value || "",
                      });
                      addWorkspaceInput.current.value = "";
                    }
                  }}
                />
              ),
            }}
          />
        </AddNewWorkspace>
        <WorkspaceUL>{renderWorkspaces()}</WorkspaceUL>
      </Container>
    </>
  );
};

export default Workspace;

export async function getServerSideProps({ req }: NextPageContext) {
  const parsedCookie = parseCookie({ cookie: req?.headers?.cookie || "" });
  const { token, userId } = parsedCookie;
  const workspaces =
    (await getWorkspacesFromServerSide({ token, userId })) || [];
  console.log("workspaces", workspaces);

  return {
    props: { token, workspaces, userId },
  };
}

// Workspace.getInitialProps = async ({ req }: NextPageContext) => {
//   const parsedCookie = parseCookie({ cookie: req?.headers?.cookie || "" });
//   const { token, userId } = parsedCookie;
//   const workspaces = await getWorkspacesFromServerSide({ token, userId });
//   console.log("workspaces", workspaces);

//   return {
//     props: { token, workspaces },
//   };
// };
